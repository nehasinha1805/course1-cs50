About ARRAYS:-
C++ provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it can be think that an array is a collection of variables of the same type.

Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index.

All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.

14 feb, 2016
C++ notes:-

chapter- Statements and flow control

The three fields in a for-loop are optional. They can be left empty, but in all cases the semicolon signs between them are required. For example, for (;n<10;) is a loop without initialization or increase (equivalent to a while-loop); and for (;n<10;++) is a loop with increase, but no initialization (maybe because the variable was already initialized before the loop). A loop with no condition is equivalent to a loop with true as condition (i.e., an infinite loop).

for ( n=0, i=100 ; n!=i ; ++n, --i )
{
   // whatever here...
}

Range-based for loop:-
The for-loop has another syntax, which is used exclusively with ranges:

for ( declaration : range ) statement;
An example of range-based for loop using strings:

// range-based for loop
#include <iostream>
#include <string>
using namespace std;

int main ()
{
  string str {"Hello!"};
  for (char c : str)
  {
    std::cout << "[" << c << "]";
  }
  std::cout << '\n';
}

output is: [H][e][l][l][o][!]

Range based loops usually also make use of type deduction for the type of the elements with auto. Typically, the range-based loop above can also be written as:
for (auto c : str)
  std::cout << "[" << c << "]";

  

	
